class Assignment:
   def __init__(self, name, difficulty):
       self.name = name
       self.difficulty = difficulty
   def name(self):
       return self.name
   def difficulty(self):
       return self.difficulty
   def __str__(self):
       return self.name


class AssignmentResult:
   def __init__(self, id, assignment, grade):
       self.assignment_id = id
       self.a_assignment = assignment
       self.assignment_grade = grade
   def id(self):
       return self.assignment_id

   def grade(self):
       return self.assignment_grade

   def assignment(self):
       return self.a_assignment

class Student:
   def __init__(self, id: int, first_name: str, last_name: str, town:str):
       self.id = id
       self.first_name = first_name
       self.last_name = last_name
       self.town = town
       self.assignments = []
       self.assignment_grades = []
       self.energy = 1.0

   def id(self)->int:
       return self.id

   def first_name(self) -> str:
       return self.first_name

   def set_first_name(self, name:str):
       self.first_name = name

   def last_name(self) -> str:
       return self.last_name

   def set_last_name(self, name: str):
       self.last_name = name

   def town(self) -> str:
       return self.town

   def set_town(self, town: str):
       self.town = town

   def __str__(self) ->str:
       return self.first_name + " " + self.last_name

   def grade(self)->float:
       if len(self.assignments) == 0:
           return 0
       if len(self.assignment_grades) == 1:
           return self.assignment_grades[0]
       grades_sum = sum(self.assignment_grades)
       grades_sum -= min(self.assignment_grades)
       return (grades_sum / (len(self.assignment_grades) - 1))

   def assign(self, assignment:Assignment) -> AssignmentResult:
       grade = 1 - (self.energy * assignment.difficultly())
       energy = self.energy - (self.energy * assignment.difficultly())
       self.assignments.append(assignment)
       self.assignment_grades.append(grade)
       self.energy = max(0.0 , energy)
       return AssignmentResult(self.id, assignment, grade)

   def sleep(self, hours:float):
       self.energy = min((self.energy + (self.energy * 0.1 * hours)), 1.0)

   def energy(self):

       return self.energy

class Course:
   def __init__(self, students: list):
       self.students = students

   def mean_grade(self) -> float:
       if len(self.students) == 0:
           return 0
       grade_sum = sum([x.grade() for x in self.students])
       return grade_sum / len(self.students)

   def max_grade(self) -> float:
       if len(self.students) == 0:
           return 0
       return max([x.grade() for x in self.students])

   def min_grade(self):
       if len(self.students) == 0:
           return 0
       return min([x.grade() for x in self.students])


   def median_grade(self) -> float:
       if len(self.students) == 0:
           return 0
       sorted_grades = sorted([x.grade() for x in self.students])
       return sorted_grades[len(sorted_grades)//2]

   def grade_variance(self) -> float:
       if len(self.students) <= 1:
           return 0
       mean = self.mean()
       grades = [x.grade() for x in self.students]
       numerator = sum([((x - mean)**2) for x in grades])
       return numerator / len(grades) - 1
  
   def grade_std_dev(self) -> float:
       return self.grade_variance() ** 0.5

   def assign(self, name: str, difficulty: float) -> None:
       for student in self.students:
           student.assign(assignment)
